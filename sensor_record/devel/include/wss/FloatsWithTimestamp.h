// Generated by gencpp from file wss/FloatsWithTimestamp.msg
// DO NOT EDIT!


#ifndef WSS_MESSAGE_FLOATSWITHTIMESTAMP_H
#define WSS_MESSAGE_FLOATSWITHTIMESTAMP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wss
{
template <class ContainerAllocator>
struct FloatsWithTimestamp_
{
  typedef FloatsWithTimestamp_<ContainerAllocator> Type;

  FloatsWithTimestamp_()
    : value(0.0)
    , voltage(0.0)
    , timestamp()  {
    }
  FloatsWithTimestamp_(const ContainerAllocator& _alloc)
    : value(0.0)
    , voltage(0.0)
    , timestamp()  {
  (void)_alloc;
    }



   typedef float _value_type;
  _value_type value;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::wss::FloatsWithTimestamp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wss::FloatsWithTimestamp_<ContainerAllocator> const> ConstPtr;

}; // struct FloatsWithTimestamp_

typedef ::wss::FloatsWithTimestamp_<std::allocator<void> > FloatsWithTimestamp;

typedef boost::shared_ptr< ::wss::FloatsWithTimestamp > FloatsWithTimestampPtr;
typedef boost::shared_ptr< ::wss::FloatsWithTimestamp const> FloatsWithTimestampConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wss::FloatsWithTimestamp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wss::FloatsWithTimestamp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wss::FloatsWithTimestamp_<ContainerAllocator1> & lhs, const ::wss::FloatsWithTimestamp_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value &&
    lhs.voltage == rhs.voltage &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wss::FloatsWithTimestamp_<ContainerAllocator1> & lhs, const ::wss::FloatsWithTimestamp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wss

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wss::FloatsWithTimestamp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wss::FloatsWithTimestamp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wss::FloatsWithTimestamp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wss::FloatsWithTimestamp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wss::FloatsWithTimestamp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wss::FloatsWithTimestamp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wss::FloatsWithTimestamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2e0e450eca59b8e01accf08721dbd3e";
  }

  static const char* value(const ::wss::FloatsWithTimestamp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2e0e450eca59b8eULL;
  static const uint64_t static_value2 = 0x01accf08721dbd3eULL;
};

template<class ContainerAllocator>
struct DataType< ::wss::FloatsWithTimestamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wss/FloatsWithTimestamp";
  }

  static const char* value(const ::wss::FloatsWithTimestamp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wss::FloatsWithTimestamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 value\n"
"float32 voltage\n"
"time timestamp\n"
;
  }

  static const char* value(const ::wss::FloatsWithTimestamp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wss::FloatsWithTimestamp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
      stream.next(m.voltage);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FloatsWithTimestamp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wss::FloatsWithTimestamp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wss::FloatsWithTimestamp_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<float>::stream(s, indent + "  ", v.value);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WSS_MESSAGE_FLOATSWITHTIMESTAMP_H
